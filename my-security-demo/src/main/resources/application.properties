# 应用服务端口
server.port = 80

# 对tomcat进行了优化配置，最大线程数是100，初始化线程是20,超时时间是5000ms
server.tomcat.min-spare-threads = 20
server.tomcat.max-threads = 100
server.connection-timeout = 5000

spring.messages.encoding = UTF-8

# 数据库连接信息
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.url= jdbc:mysql://127.0.0.1:3306/springsecurity?useUnicode=yes&characterEncoding=UTF-8&useSSL=false
spring.datasource.username = root
spring.datasource.password = 123456
# mybatis配置，实体类所在包名
mybatis.type-aliases-package = com.hand.dto
mybatis.mapper-locations = classpath:com.hand.web.mapper/*.xml
# 打印执行sql
mybatis.configuration.log-impl = org.apache.ibatis.logging.stdout.StdOutImpl
# 驼峰下划线自动转换
mybatis.configuration.map-underscore-to-camel-case = true
# 通用mapper配置，公用接口类路径
mapper.mappers = com.hand.web.mybatis.BaseMapper
mapper.identity = MYSQL

# session超时时间，秒为单位，默认是30分钟，最小为1分钟，即60秒。
# org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory#configureSession
server.session.timeout = 600

# security默认提供的管理session的方式，none表示使用j2ee默认的方式，即不做任何处理
# org.springframework.boot.autoconfigure.session.StoreType
# 用REDIS举例，在本地启动两个实例，分别是8080和8081。在8080登录之后session存储到redis，然后访问8081也是可以从redis拿到session的，不用再次登录
spring.session.store-type = none

# redis配置
spring.redis.host = 127.0.0.1
spring.redis.port = 6379
spring.redis.database = 2
spring.redis.password =

# 关闭security默认的登录方式
#security.basic.enabled = false

spring.mvc.view.prefix=/resources/
spring.mvc.view.suffix=.html

# thymeleaf静态资源配置
spring.thymeleaf.prefix=classpath:/resources/
spring.thymeleaf.check-template-location=true
spring.thymeleaf.suffix=.html
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false

# 上传文件最大size(仅开放上传头像)
spring.http.multipart.maxFileSize = 1MB
spring.http.multipart.maxRequestSize = 1MB
# 文件路径
user.head.image.path = D:/myResource/securityFile/
# user.head.image.path = /myFile/

# 配置登录页面
hand.security.browser.loginPage = /demo-signIn.html
# 登录类型REDIRECT重定向，登录成功后重定向到请求页面;JSON类型返回一段认证信息
hand.security.browser.loginType = REDIRECT
# 注册页面，如果系统中实现了ConnectionSignUp接口，那么使用第三方登录时会自动注册
hand.security.browser.signUpUrl = /demo-register.html
# 退出之后跳转的页面，如果不指定，退出之后返回一段json字符串
hand.security.browser.signOutUrl = /demo-signIn.html
hand.security.browser.forwordURL[0] = /to-demo-signIn

# 验证码应用级配置
#hand.security.code.image.length = 5
#hand.security.code.image.width = 100
#hand.security.code.image.urls = /user,/user/*

#短信服务：阿里云个人accessKeyId
hand.security.code.sms.accessKeyId =
#短信服务：阿里云个人accessKeyId
hand.security.code.sms.accessKeySecret =

# QQ开发者应用的appId和appSecretId
hand.security.social.qq.app-id =
hand.security.social.qq.app-secret = 

# 微信开发者应用的appId和appSecretId
#hand.security.social.weixin.app-id =
#hand.security.social.weixin.app-secret =

# 第三方应用标识，拼接在filterProcessesUrl后边，与域名一起组成第三方登录的回调地址
hand.security.social.qq.providerId = qq
# Social拦截路径
hand.security.social.filterProcessesUrl = /thirdPartyLogin

# 授权的第三方应用，类似于QQ分配给我们的appId和appSecuret
security.oauth2.client.client-id = hand
security.oauth2.client.client-secret = handSecret
